// Initialize global artwork data
let globalartworkData;
let startDate = new Date("01/01/2025");
let currentDate = new Date();
let totalScore = 0;
let questionStep = 1;

// prettier-ignore
const ARTWORK_VALUES = {
    artists: [
        "Abraham Mignon ğŸ‡³ğŸ‡±", "Adam Albrecht ğŸ‡©ğŸ‡ª", "Adam Edouard ğŸ‡ºğŸ‡¸", "Adelaide Labille Guiard ğŸ‡«ğŸ‡·", 
        "Adele Romany ğŸ‡«ğŸ‡·", "Adolph Ulrich Wertmuller ğŸ‡¨ğŸ‡­", "Adriaan De Lelie ğŸ‡³ğŸ‡±", "Adriaen Thomasz Key ğŸ‡³ğŸ‡±", 
        "Aelbert Cuyp ğŸ‡³ğŸ‡±", "Albert Andre ğŸ‡«ğŸ‡·", "Albert Bierstadt ğŸ‡ºğŸ‡¸", "Albert Marquet ğŸ‡«ğŸ‡·", 
        "Albrecht Durer ğŸ‡©ğŸ‡ª", "Alexandre Cabanel ğŸ‡«ğŸ‡·", "Alexei Von Jawlensky ğŸ‡·ğŸ‡º", "Alexey Savrasov ğŸ‡·ğŸ‡º", 
        "Alfred Henry Maurer ğŸ‡ºğŸ‡¸", "Alfred Sisley ğŸ‡«ğŸ‡·", "Alfred Thompson Bricher ğŸ‡ºğŸ‡¸", "Alice Bailly ğŸ‡¨ğŸ‡­", 
        "Amadeo de Souza Cardoso ğŸ‡ªğŸ‡¸", "Ambrosius Bosschaert ğŸ‡³ğŸ‡±", "Amedeo Modigliani ğŸ‡®ğŸ‡¹", 
        "Anders Zorn ğŸ‡¨ğŸ‡­", "Andre Derain ğŸ‡«ğŸ‡·", "Andrea Mantegna ğŸ‡®ğŸ‡¹", "Angel Zarraga ğŸ‡²ğŸ‡½", 
        "Anne Vallayer Coster ğŸ‡«ğŸ‡·", "Anthony Van Dyck ğŸ‡§ğŸ‡ª", "Antoine Bouvard ğŸ‡«ğŸ‡·", "Antoine Jean Gros ğŸ‡«ğŸ‡·", 
        "Anton Raphael Mengs ğŸ‡©ğŸ‡ª", "Aristide Maillol ğŸ‡«ğŸ‡·", "Arnold Bocklin ğŸ‡¨ğŸ‡­", "Arthur Bowen Davies ğŸ‡ºğŸ‡¸", 
        "Arthur Fitzwilliam Tait ğŸ‡ºğŸ‡¸", "Arthur Stockdale Cope ğŸ‡¬ğŸ‡§", "Asher Brown Durand ğŸ‡ºğŸ‡¸", "August Macke ğŸ‡©ğŸ‡ª", 
        "Bartholomeus Van der Helst ğŸ‡³ğŸ‡±", "Bartolome Esteban Murillo ğŸ‡ªğŸ‡¸", "Becker Paula Modersohn ğŸ‡©ğŸ‡ª", 
        "Benjamin Marshall ğŸ‡¬ğŸ‡§", "Benjamin West ğŸ‡ºğŸ‡¸", "Benson Frank Weston ğŸ‡ºğŸ‡¸", "Benvenuto Garofalo ğŸ‡®ğŸ‡¹", 
        "Berthe Morisot ğŸ‡«ğŸ‡·", "Buonarroti Michelangelo ğŸ‡®ğŸ‡¹", "Caesar Boetius Van Everdingen ğŸ‡³ğŸ‡±", 
        "Camille Bombois ğŸ‡«ğŸ‡·", "Camille Pissarro ğŸ‡«ğŸ‡·", "Carel Fabritius ğŸ‡³ğŸ‡±", "Carl Larsson ğŸ‡¨ğŸ‡­", 
        "Carlo Brancaccio ğŸ‡®ğŸ‡¹", "Carlo Carra ğŸ‡®ğŸ‡¹", "Caspar David Friedrich ğŸ‡©ğŸ‡ª", "Cecilia Beaux ğŸ‡ºğŸ‡¸", 
        "Chaim Soutine ğŸ‡«ğŸ‡·", "Charles Brooking ğŸ‡¬ğŸ‡§", "Charles Caleb Ward ğŸ‡¨ğŸ‡¦", "Charles Courtney Curran ğŸ‡ºğŸ‡¸", 
        "Charles Cromwell Ingham ğŸ‡®ğŸ‡ª", "Charles Demuth ğŸ‡ºğŸ‡¸", "Charles Francois Daubigny ğŸ‡«ğŸ‡·", 
        "Charles Marion Russell ğŸ‡ºğŸ‡¸", "Charles Peale Polk ğŸ‡ºğŸ‡¸", "Charles Sprague Pearce ğŸ‡ºğŸ‡¸", "Charles Towne ğŸ‡¬ğŸ‡§", 
        "Charles Willson Peale ğŸ‡ºğŸ‡¸", "Childe Hassam ğŸ‡ºğŸ‡¸", "Christian Rohlfs ğŸ‡©ğŸ‡ª", "Cima Da Conegliano ğŸ‡®ğŸ‡¹", 
        "Claude Joseph Vernet ğŸ‡«ğŸ‡·", "Claude Lorraine ğŸ‡«ğŸ‡·", "Claude Monet ğŸ‡«ğŸ‡·", "Constantin A Westchiloff ğŸ‡·ğŸ‡º", 
        "Cornelis Springer ğŸ‡³ğŸ‡±", "Cornelis Troost ğŸ‡³ğŸ‡±", "Cornelis Van Haarlem ğŸ‡³ğŸ‡±", "Daniel Ridgway Knight ğŸ‡ºğŸ‡¸", 
        "David Teniers ğŸ‡§ğŸ‡ª", "Diego Velazquez ğŸ‡ªğŸ‡¸", "Dominikos TheotokÃ³poulos ğŸ‡ªğŸ‡¸", "Dominic Serres ğŸ‡¬ğŸ‡§", 
        "Edgar Degas ğŸ‡«ğŸ‡·", "Edgar William ğŸ‡ºğŸ‡¸", "Edmond Francois Aman Jean ğŸ‡«ğŸ‡·", "Edmund Charles Tarbell ğŸ‡ºğŸ‡¸", 
        "Edouard Manet ğŸ‡«ğŸ‡·", "Edouard Vuillard ğŸ‡«ğŸ‡·", "Eduard Von Grutzner ğŸ‡©ğŸ‡ª", "Edvard Munch ğŸ‡³ğŸ‡´", 
        "Edward Burne Jones ğŸ‡¬ğŸ‡§", "Edward Hicks ğŸ‡ºğŸ‡¸", "Edward Potthast ğŸ‡ºğŸ‡¸", "Edward William Cooke ğŸ‡¬ğŸ‡§", 
        "Edwin Lord Weeks ğŸ‡ºğŸ‡¸", "Egon Schiele ğŸ‡¦ğŸ‡¹", "Elisabeth Vigee Le Brun ğŸ‡«ğŸ‡·", "Emile Bernard ğŸ‡«ğŸ‡·", 
        "Enoch Wood Perry ğŸ‡ºğŸ‡¸", "Ernest Lawson ğŸ‡¨ğŸ‡¦", "Ernst Ludwig Kirchner ğŸ‡©ğŸ‡ª", "Etienne Dinet ğŸ‡«ğŸ‡·", 
        "Eugene De Blaas ğŸ‡¦ğŸ‡¹", "Eugene Delacroix ğŸ‡«ğŸ‡·", "Eugene Girardet ğŸ‡«ğŸ‡·", "Eugene Louis Boudin ğŸ‡«ğŸ‡·", 
        "Federico Zandomeneghi ğŸ‡®ğŸ‡¹", "Felix Vallotton ğŸ‡¨ğŸ‡­", "Ferdinand Bol ğŸ‡³ğŸ‡±", "Ferdinand Hodler ğŸ‡¨ğŸ‡­", 
        "Fernand Cormon ğŸ‡«ğŸ‡·", "Fernand Leger ğŸ‡«ğŸ‡·", "Fitz Hugh Lane ğŸ‡ºğŸ‡¸", "Francesco Guardi ğŸ‡®ğŸ‡¹", 
        "Francis Augustus Silva ğŸ‡ºğŸ‡¸", "Francis Luis Mora ğŸ‡ºğŸ‡¸", "Francis Picabia ğŸ‡«ğŸ‡·", "Francis William Edmonds ğŸ‡ºğŸ‡¸", 
        "Francisco De Goya ğŸ‡ªğŸ‡¸", "Francisco De Zurbaran ğŸ‡ªğŸ‡¸", "Francois Boucher ğŸ‡«ğŸ‡·", "Francois Gerard ğŸ‡«ğŸ‡·", 
        "Francois Hubert Drouais ğŸ‡«ğŸ‡·", "Frank Duveneck ğŸ‡ºğŸ‡¸", "Frans Francken ğŸ‡§ğŸ‡ª", "Frans Hals ğŸ‡³ğŸ‡±", 
        "Frans Jansz Post ğŸ‡³ğŸ‡±", "Franz Marc ğŸ‡©ğŸ‡ª", "Franz Xavier Winterhalter ğŸ‡©ğŸ‡ª", "Frederic Edwin Church ğŸ‡ºğŸ‡¸", 
        "Frederic Remington ğŸ‡ºğŸ‡¸", "Frederick Carl Frieseke ğŸ‡ºğŸ‡¸", "Friedrich Von Amerling ğŸ‡¦ğŸ‡¹", "Gabriel Metsu ğŸ‡³ğŸ‡±", 
        "Gabriele Munter ğŸ‡©ğŸ‡ª", "Gaston Bussiere ğŸ‡«ğŸ‡·", "Gaston La Touche ğŸ‡«ğŸ‡·", "Geertgen Tot Sint Jans ğŸ‡³ğŸ‡±", 
        "George Caleb Bingham ğŸ‡ºğŸ‡¸", "George Catlin ğŸ‡ºğŸ‡¸", "George Frederic Watts ğŸ‡¬ğŸ‡§", "George Gardner Symons ğŸ‡ºğŸ‡¸", 
        "George Garrard ğŸ‡¬ğŸ‡§", "George Henry Laporte ğŸ‡¬ğŸ‡§", "George Inness ğŸ‡ºğŸ‡¸", "George P A Healy ğŸ‡ºğŸ‡¸", 
        "George Romney ğŸ‡¬ğŸ‡§", "George Stubbs ğŸ‡¬ğŸ‡§", "George Wesley Bellows ğŸ‡ºğŸ‡¸", "Georges Braque ğŸ‡«ğŸ‡·", 
        "Georges De La Tour ğŸ‡«ğŸ‡·", "Georges Despagnat ğŸ‡«ğŸ‡·", "Georges Lemmen ğŸ‡§ğŸ‡ª", "Georges Rouault ğŸ‡«ğŸ‡·", 
        "Georges Seurat ğŸ‡«ğŸ‡·", "Gerard Ter Borch ğŸ‡³ğŸ‡±", "Gerard Van Honthorst ğŸ‡³ğŸ‡±", "Gerrit Berckheyde ğŸ‡³ğŸ‡±", 
        "Gerrit Dou ğŸ‡³ğŸ‡±", "Giacomo Balla ğŸ‡®ğŸ‡¹", "Gilbert Stuart ğŸ‡ºğŸ‡¸", "Giorgio Morandi ğŸ‡®ğŸ‡¹", 
        "Giovanni Antionio Canaletto ğŸ‡®ğŸ‡¹", "Giovanni Battista Tiepolo ğŸ‡®ğŸ‡¹", "Giovanni Boldini ğŸ‡®ğŸ‡¹", 
        "Giuseppe Arcimboldo ğŸ‡®ğŸ‡¹", "Grant Wood ğŸ‡ºğŸ‡¸", "Guido Reni ğŸ‡®ğŸ‡¹", "Guillaumin Armand ğŸ‡«ğŸ‡·", 
        "Gustaf Wilhelm Palm ğŸ‡¨ğŸ‡­", "Gustav Klimt ğŸ‡¦ğŸ‡¹", "Gustave Caillebotte ğŸ‡«ğŸ‡·", "Gustave Courbet ğŸ‡«ğŸ‡·", 
        "Gustave Dore ğŸ‡«ğŸ‡·", "Gustave Moreau ğŸ‡«ğŸ‡·", "Gwen John ğŸ‡¬ğŸ‡§", "Hans Dahl ğŸ‡³ğŸ‡´", "Hans Holbein ğŸ‡©ğŸ‡ª", 
        "Hans Memling ğŸ‡³ğŸ‡±", "Heinrich Campendonk ğŸ‡©ğŸ‡ª", "Hendrick Avercamp ğŸ‡³ğŸ‡±", "Hendrick Dubbels ğŸ‡³ğŸ‡±", 
        "Hendrick Ter Brugghen ğŸ‡³ğŸ‡±", "Hendrik Voogd ğŸ‡³ğŸ‡±", "Henri De Toulouse Lautrec ğŸ‡«ğŸ‡·", 
        "Henri Edmond Cross ğŸ‡«ğŸ‡·", "Henri Fantin Latour ğŸ‡«ğŸ‡·", "Henri Le Sidaner ğŸ‡«ğŸ‡·", "Henri Lebasque ğŸ‡«ğŸ‡·", 
        "Henri Manguin ğŸ‡«ğŸ‡·", "Henri Rousseau ğŸ‡«ğŸ‡·", "Henry Moret ğŸ‡«ğŸ‡·", "Henry Raeburn ğŸ‡¬ğŸ‡§", 
        "Horace Vernet ğŸ‡«ğŸ‡·", "Isaac Van Ostade ğŸ‡³ğŸ‡±", "Isaak Levitan ğŸ‡·ğŸ‡º", "Ivan Aivazovskiy ğŸ‡·ğŸ‡º", 
        "Ivan Shishkin ğŸ‡·ğŸ‡º", "Jack Butler Yeats ğŸ‡®ğŸ‡ª", "Jacob Cornelisz Van Oostsanen ğŸ‡³ğŸ‡±", 
        "Jacob Van Ruisdael ğŸ‡³ğŸ‡±", "Jacques Laurent Agasse ğŸ‡¨ğŸ‡­", "Jacques Louis David ğŸ‡«ğŸ‡·", "James Ensor ğŸ‡§ğŸ‡ª", 
        "James Mcdougal Hart ğŸ‡ºğŸ‡¸", "James Mcneill Whistler ğŸ‡ºğŸ‡¸", "James Peale ğŸ‡ºğŸ‡¸", "James Tissot ğŸ‡«ğŸ‡·", 
        "Jan Adam Kruseman ğŸ‡³ğŸ‡±", "Jan Both ğŸ‡³ğŸ‡±", "Jan Brueghel ğŸ‡§ğŸ‡ª", "Jan Miense Molenaer ğŸ‡³ğŸ‡±", 
        "Jan Porcellis ğŸ‡§ğŸ‡ª", "Jan Portielje ğŸ‡³ğŸ‡±", "Jan Steen ğŸ‡³ğŸ‡±", "Jan Toorop ğŸ‡³ğŸ‡±", "Jan Van Eyck ğŸ‡§ğŸ‡ª", 
        "Jan Van Goyen ğŸ‡³ğŸ‡±", "Jan Van Huysum ğŸ‡³ğŸ‡±", "Jan Van Scorel ğŸ‡³ğŸ‡±", "Jan Vermeer ğŸ‡³ğŸ‡±", 
        "Jan Willem Pieneman ğŸ‡³ğŸ‡±", "Jean Antoine Watteau ğŸ‡«ğŸ‡·", "Jean Auguste Ingres ğŸ‡«ğŸ‡·", 
        "Jean Francois Millet ğŸ‡«ğŸ‡·", "Jean Louis David ğŸ‡«ğŸ‡·", "Jean Metzinger ğŸ‡«ğŸ‡·", "Jean Puy ğŸ‡«ğŸ‡·", 
        "Jean-Baptiste-Camille Corot ğŸ‡«ğŸ‡·", "Jean-Baptiste-Simeon Chardin ğŸ‡«ğŸ‡·", "Johann Zoffany ğŸ‡¬ğŸ‡§", 
        "Johann Christian Dahl ğŸ‡©ğŸ‡ª", "Johann Heinrich FÃ¼ssli ğŸ‡¨ğŸ‡­", "Johannes Vermeer ğŸ‡³ğŸ‡±", 
        "John Cleveley ğŸ‡¬ğŸ‡§", "John Constable ğŸ‡¬ğŸ‡§", "John Durand ğŸ‡ºğŸ‡¸", "John Everett Millais ğŸ‡¬ğŸ‡§", 
        "John Francis Rigaud ğŸ‡¬ğŸ‡§", "John Frederick Herring ğŸ‡¬ğŸ‡§", "John Frederick Kensett ğŸ‡ºğŸ‡¸", 
        "John French Sloan ğŸ‡ºğŸ‡¸", "John Hoppner ğŸ‡¬ğŸ‡§", "John James Audubon ğŸ‡ºğŸ‡¸", "John Kane ğŸ‡ºğŸ‡¸", 
        "John La Farge ğŸ‡ºğŸ‡¸", "John Lynn ğŸ‡¬ğŸ‡§", "John Ottis Adams ğŸ‡ºğŸ‡¸", "John Russell ğŸ‡ºğŸ‡¸", 
        "John Singer Sargent ğŸ‡ºğŸ‡¸", "John Singleton Copley ğŸ‡ºğŸ‡¸", "John Trumbull ğŸ‡ºğŸ‡¸", "John Vanderbank ğŸ‡¬ğŸ‡§", 
        "John Wesley Jarvis ğŸ‡ºğŸ‡¸", "John White Alexander ğŸ‡ºğŸ‡¸", "John William Godward ğŸ‡¬ğŸ‡§", 
        "John William Waterhouse ğŸ‡¬ğŸ‡§", "John Wollaston ğŸ‡¬ğŸ‡§", "Joseph Blackburn ğŸ‡ºğŸ‡¸", "Joshua Johnson ğŸ‡ºğŸ‡¸", 
        "Julian Alden Weir ğŸ‡ºğŸ‡¸", "Karel Dujardin ğŸ‡³ğŸ‡±", "Louis Apol ğŸ‡³ğŸ‡±", "Ludolf Backhuysen ğŸ‡³ğŸ‡±", 
        "Ludvig Deutsch ğŸ‡¦ğŸ‡¹", "Max Pechstein ğŸ‡©ğŸ‡ª", "Maxime Maufra ğŸ‡«ğŸ‡·", "Maxine Margolis ğŸ‡ºğŸ‡¸", 
        "Maximilien Luce ğŸ‡«ğŸ‡·", "Michelangelo Buonarroti ğŸ‡®ğŸ‡¹", "Nicolaes Berchem ğŸ‡³ğŸ‡±", 
        "Oswald Achenbach ğŸ‡©ğŸ‡ª", "Pieter Bruegel ğŸ‡³ğŸ‡±", "Pieter Claesz ğŸ‡³ğŸ‡±", "Pieter De Hooch ğŸ‡³ğŸ‡±", 
        "Pieter Jansz Saenredam ğŸ‡³ğŸ‡±", "Pieter Quast ğŸ‡³ğŸ‡±", "Pieter Vermeer ğŸ‡³ğŸ‡±", "Rachel Ruysch ğŸ‡³ğŸ‡±", 
        "Reinier Nooms ğŸ‡³ğŸ‡±", "Rogier Van der Weyden ğŸ‡§ğŸ‡ª", "Simon De Vlieger ğŸ‡³ğŸ‡±", 
        "Thomas Waterman Wood ğŸ‡ºğŸ‡¸", "Thomas Cole ğŸ‡ºğŸ‡¸", "Thomas Eakins ğŸ‡ºğŸ‡¸", "Thomas Gainsborough ğŸ‡¬ğŸ‡§", 
        "Thomas Hovenden ğŸ‡ºğŸ‡¸", "Thomas Jacques Somerscales ğŸ‡¬ğŸ‡§", "Thomas Luny ğŸ‡¬ğŸ‡§", 
        "Thomas Moran ğŸ‡ºğŸ‡¸", "Thomas Sully ğŸ‡ºğŸ‡¸", "Thomas Troger ğŸ‡©ğŸ‡ª", "Willem Bartel Van der Kooi ğŸ‡³ğŸ‡±", 
        "Willem Claesz Heda ğŸ‡³ğŸ‡±", "Willem Duyster ğŸ‡³ğŸ‡±", "Willem Maris ğŸ‡³ğŸ‡±", "Willem Van De Velde ğŸ‡³ğŸ‡±"
    ],
      
  nationalities: [
    "American", "Austrian", "Belgian", "Canadian", "Dutch", "English", "Flemish",
    "French", "German", "Irish", "Italian", "Mexican", "Norwegian", "Russian",
    "Spanish", "Swiss"
  ],
  styles: [
    "American Art", "American Landscape", "Art Nouveau", "Avant-Garde", "Baroque",
    "Classicism", "Cubism", "Expressionism", "Fauvism", "Impressionism", "Nabi",
    "Naturalism", "Neo-Classicism", "Orientalism", "Pointillism", 
    "Post-Impressionism", "Realism", "Renaissance", "Rococo", "Romanticism",
    "Surrealism", "Symbolism"
  ],
  subjects: [
    "Abstract/Modern Art", "Architectures", "Autumn/Fall", "Bridges", 
    "Cafes/Bars", "Christianity", "Churches/Temples/Mosques", "Dancers", "Deers",
    "Dogs", "Flowers", "Gardens", "Horses", "Jesus Christ", "Landscape Art",
    "Lovers", "Marine Art/Maritime", "Musics", "Nude", "Portraits",
    "Rivers/Lakes", "Seascapes", "Spring", "Still-Life", "Summer", "Tigers",
    "U.S. Presidents", "Water Lilies", "Winter"
  ],
  countries: [
    "Brazil", "France", "Germany", "Hungary", "Israel", "Netherlands", "Russia",
    "Spain", "Switzerland", "UK", "USA", "United Kingdom"
  ],
  museums: [
    "Cleveland Museum Of Art", "Fine Arts Museums of San Francisco Legion of Honor",
    "Hungarian National Gallery", "Indianapolis Museum of Art", "Israel Museum",
    "Kunsthaus ZÃ¼rich", "Los Angeles County Museum of Art", "Mauritshuis Museum",
    "Museum Folkwang", "Museum of Fine Arts of Nancy", "Museum of Fine Arts, Houston",
    "MusÃ©e d'Orsay", "MusÃ©e des Beaux-Arts de Quimper", "MusÃ©e du Louvre",
    "National Gallery", "National Gallery of Art", "National Maritime Museum",
    "Nelson-Atkins Museum of Art", "Philadelphia Museum of Art",
    "Pushkin State Museum of Fine Arts", "Rijksmuseum", "Saint Louis Art Museum",
    "Smithsonian American Art Museum", "Solomon R. Guggenheim Museum",
    "SÃ£o Paulo Museum of Art", "The Art Institute of Chicago",
    "The Barnes Foundation", "The J. Paul Getty Museum",
    "The Metropolitan Museum of Art", "The Museum of Modern Art",
    "The Phillips Collection", "The Prado Museum", "The State Hermitage Museum",
    "The Tate Gallery", "Thussen-Bornemisza Museum", "Toledo Museum of Art"
  ]
};

// prettier-ignore
const nationalityInput = document.querySelector('input[id="nationality-select"]');
const yearInput = document.querySelector('input[id="year-select"]');
const artistInput = document.querySelector('input[id="artist-select"]');

// 1. Toast Logic
const toastContainer = document.getElementById("toast-container");

// Function to generate toasts based on the autocomplete suggestions
function generateToasts(filteredNationalities, isNationality = true) {
  toastContainer.innerHTML = ""; // Clear previous toasts

  // Generate toasts with nationalities or artists from the autocomplete suggestions
  filteredNationalities.forEach((suggestion, index) => {
    if (index < 5) {
      createToast(suggestion, "neutral", isNationality);
    }
  });
}

function createToast(suggestion, type, isNationality) {
  // Create the toast element
  const toast = document.createElement("div");
  toast.classList.add("toast");

  // Customize based on toast type (e.g., success, error, neutral)
  if (type === "success") {
    toast.classList.add("toast-success");
  } else if (type === "error") {
    toast.classList.add("toast-error");
  }

  toast.textContent = suggestion;

  // Add click event to toast
  toast.addEventListener("click", function () {
    // Update the input field based on whether it's nationality or artist
    if (isNationality) {
      nationalityInput.value = suggestion;
    } else {
      artistInput.value = suggestion;
    }
  });

  // Append toast to the container
  if (!toastContainer) {
    // If the container doesn't exist, create it
    const container = document.createElement("div");
    container.id = "toast-container";
    document.body.appendChild(container);
  }

  toastContainer.appendChild(toast);

  // Remove toast after 5 seconds
  setTimeout(() => {
    toastContainer.removeChild(toast);
  }, 5000); // Toast disappears after 5 seconds
}

// 2. Autocomplete Logic
nationalityInput.addEventListener("input", function () {
  const query = nationalityInput.value.toLowerCase();

  if (query.length > 0) {
    const filteredNationalities = ARTWORK_VALUES.nationalities.filter(
      (nationality) => nationality.toLowerCase().includes(query)
    );

    // Generate toasts with the filtered nationalities
    generateToasts(filteredNationalities, true);
  }
});

artistInput.addEventListener("input", function () {
  const query = artistInput.value.toLowerCase();

  if (query.length > 0) {
    // Filter the artist names based on the input query
    const filteredArtists = ARTWORK_VALUES.artists.filter((artist) =>
      artist.toLowerCase().includes(query)
    );

    // Generate toasts with the filtered artists
    generateToasts(filteredArtists, false);
  }
});

// Async function to fetch the artwork data
async function fetchArtworkData() {
  // Only fetching cleaned_artwork_data.json since unique values are included in ARTWORK_VALUES
  const response = await fetch("./art_data/cleaned_artwork_data2.json");
  const artworkData = await response.json();

  globalartworkData = artworkData;
}

// prettier-ignore
function displayArtwork(artwork) {
  /* Function to display artwork */
  console.log(artwork);
  document.getElementById("artwork-image").src = artwork.image_url || "";
  document.getElementById("artwork-image-result").src = artwork.image_url || "";
  document.getElementById("artwork-artist").textContent = `${artwork.artist || "Unknown Artist"}`;
  document.getElementById("artwork-title").textContent = `${artwork.worktitle || "Untitled"}`;
  if (artwork.subject) {
    document.getElementById("subject").textContent = artwork.subject;
    document.getElementById("subject").style.display = "inline";
  }
  if (artwork.style) {
    document.getElementById("style").textContent = artwork.style;
    document.getElementById("style").style.display = "inline";
  }
  document.getElementById("artwork-link").href = artwork.wikipedia_url || "#";
}

// Format date and wait for artwork data
async function formatDate(date) {
  const mm = String(date.getMonth() + 1).padStart(2, "0");
  const dd = String(date.getDate()).padStart(2, "0");
  const yyyy = date.getFullYear();

  let Difference_In_Time = Math.round(
    (currentDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24)
  );

  console.log(Difference_In_Time);

  // Wait for artwork data to load before displaying the artwork
  await fetchArtworkData();

  // Ensure artwork data is loaded before calling displayArtwork
  displayArtwork(globalartworkData[Difference_In_Time]);

  return `${mm}/${dd}/${yyyy}`;
}

// Update the date display
async function updateDateDisplay() {
  document.getElementById("currentDate").textContent = await formatDate(
    currentDate
  );
}

// Initialize date display
updateDateDisplay();

// Event listeners for navigation buttons
document.getElementById("prevDate").addEventListener("click", () => {
  currentDate.setDate(currentDate.getDate() - 1);
  updateDateDisplay();
});

document.getElementById("nextDate").addEventListener("click", () => {
  currentDate.setDate(currentDate.getDate() + 1);
  updateDateDisplay();
});

// Function to populate a select element with options
function populateSelect(selectId, options) {
  const select = document.getElementById(selectId);
  options.forEach((option) => {
    const optionElement = document.createElement("option");
    optionElement.value = option;
    optionElement.textContent = option;
    select.appendChild(optionElement);
  });
}

// Quiz state
let currentQuestion = 0;
let timeLeft = 99;
let score = 0;
let timerInterval;

// DOM elements
const timerProgress = document.getElementById("timer-progress");
const timerText = document.getElementById("timer-text");

// Timer circle calculations
const radius = 20;
const circumference = 2 * Math.PI * radius;
timerProgress.style.strokeDasharray = circumference;

function updateTimer() {
  const offset = circumference * (1 - timeLeft / 99);
  timerProgress.style.strokeDashoffset = offset;
  timerText.textContent = timeLeft;
}

// Function to move to next question
function showNextQuestion() {
  questionStep++;
  if (questionStep === 2) {
    nationalityInput.style.display = "none";
    yearInput.style.display = "block";
    yearInput.focus();
  } else if (questionStep === 3) {
    yearInput.style.display = "none";
    artistInput.style.display = "block";
    artistInput.focus();
  }
}

// Function to show final score
function showFinalScore() {
  //   document.getElementById("score").innerHTML = totalScore;
  document.getElementById("result").style.display = "inline";
}

// Function to handle answer submission
function handleAnswer() {
  const artwork =
    globalartworkData[
      Math.round(
        (currentDate.getTime() - startDate.getTime()) / (1000 * 3600 * 24)
      )
    ];

  switch (questionStep) {
    case 1:
      input = nationalityInput.value.toLowerCase();
      console.log(input);
      if (input == artwork.artist.toLowerCase()) {
        totalScore++;
      }

      break;
    case 2:
      input = parseInt(yearInput.value);
      console.log(input);
      if (input >= artwork.artist_born && input <= artwork.artist_dead)
        totalScore++;

      break;
    case 3:
      input = artistInput.value.toLowerCase();
      console.log(input);
      if (input == artwork.artist.toLowerCase()) totalScore++;

      break;
  }

  console.log("yes");

  if (questionStep < 3) {
    showNextQuestion();
  } else {
    clearInterval(timerInterval);
    showFinalScore();
  }
}

function startTimer() {
  clearInterval(timerInterval);
  timeLeft = 99;
  updateTimer();
  timerInterval = setInterval(() => {
    timeLeft--;
    updateTimer();
    if (timeLeft === 0) {
      clearInterval(timerInterval);
      showFinalScore();
    }
  }, 1000);
}

function hideLoadingOverlays() {
  document.getElementById("loading-text").style.display = "block";
  document.getElementById("loading-overlay").style.display = "fixed";
  document.getElementById("loading-overlay2").style.display = "fixed";

  setTimeout(() => {
    const overlay = document.getElementById("loading-overlay");
    overlay.style.transition = "opacity 1s ease-out";
    overlay.style.opacity = "0";
  }, 2000);

  setTimeout(() => {
    const overlay = document.getElementById("loading-overlay2");
    overlay.style.transition = "opacity 1s ease-out";
    overlay.style.opacity = "0";
  }, 3000);

  setTimeout(() => {
    const overlay = document.getElementById("loading-overlay");
    const overlay2 = document.getElementById("loading-overlay2");
    overlay.style.display = "none";
    overlay2.style.display = "none";
  }, 4000);
}

// Add at the beginning of your script.js
document.addEventListener("DOMContentLoaded", () => {
  const tutorialModal = document.getElementById("tutorial-modal");
  const startGameBtn = document.getElementById("start-game");

  clearInterval(timerInterval);
  updateTimer();

  // Start game button click handler
  startGameBtn.addEventListener("click", () => {
    tutorialModal.classList.add("opacity-0");
    setTimeout(() => {
      tutorialModal.style.display = "none";
    }, 300);

    // Reset and start the timer
    timeLeft = 99;
    startTimer();
  });
});

// Fetch data on load
fetchArtworkData()
  .then(() => {
    hideLoadingOverlays();
  })
  .catch((error) => {
    console.error("Error fetching data:", error);
    document.getElementById("loading-text").textContent =
      "Failed to load data.";
  });

const shareData = {
  title: "Do you know this famous piece?",
  text: "See if you can figure out the artist faster than I did",
  url: "https://conoseur.github.io",
};

const sharebtn = document.getElementById("shareBTN");

sharebtn.addEventListener("click", async () => {
  try {
    await navigator.share(shareData);
  } catch (err) {
    console.log(err);
  }
});
